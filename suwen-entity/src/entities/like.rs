//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "like"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: i32,
    pub identity_id: i32,
    pub content_metadata_id: i32,
    pub created_at: DateTimeLocal,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    IdentityId,
    ContentMetadataId,
    CreatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Identity,
    ContentMetadata,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::IdentityId => ColumnType::Integer.def(),
            Self::ContentMetadataId => ColumnType::Integer.def(),
            Self::CreatedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Identity => Entity::belongs_to(super::identity::Entity)
                .from(Column::IdentityId)
                .to(super::identity::Column::Id)
                .into(),
            Self::ContentMetadata => Entity::belongs_to(super::content_metadata::Entity)
                .from(Column::ContentMetadataId)
                .to(super::content_metadata::Column::Id)
                .into(),
        }
    }
}

impl Related<super::identity::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Identity.def()
    }
}

impl Related<super::content_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentMetadata.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
