//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;

use crate::VecString;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "content_metadata"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Eq)]
pub struct Model {
    pub id: i32,
    pub slug: String,
    pub cover_images: VecString,
    pub tags: VecString,
    pub content_type: String,
    pub original_lang: String,
    pub view_count: i32,
    pub comment_count: i32,
    pub like_count: i32,
    pub published_at: Option<DateTimeLocal>,
    pub created_at: DateTimeLocal,
    pub updated_at: DateTimeLocal,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Slug,
    CoverImages,
    Tags,
    ContentType,
    OriginalLang,
    ViewCount,
    CommentCount,
    LikeCount,
    PublishedAt,
    CreatedAt,
    UpdatedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = i32;
    fn auto_increment() -> bool {
        true
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Content,
    ContentMetadataTag,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Integer.def(),
            Self::Slug => ColumnType::Text.def().unique(),
            Self::CoverImages => ColumnType::Text.def(),
            Self::Tags => ColumnType::Text.def(),
            Self::ContentType => ColumnType::Text.def(),
            Self::OriginalLang => ColumnType::Text.def(),
            Self::ViewCount => ColumnType::Integer.def(),
            Self::CommentCount => ColumnType::Integer.def(),
            Self::LikeCount => ColumnType::Integer.def(),
            Self::PublishedAt => ColumnType::DateTime.def().null(),
            Self::CreatedAt => ColumnType::DateTime.def(),
            Self::UpdatedAt => ColumnType::DateTime.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Content => Entity::has_many(super::content::Entity).into(),
            Self::ContentMetadataTag => {
                Entity::has_many(super::content_metadata_tag::Entity).into()
            }
        }
    }
}

impl Related<super::content::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Content.def()
    }
}

impl Related<super::content_metadata_tag::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentMetadataTag.def()
    }
}

impl Related<super::tag::Entity> for Entity {
    fn to() -> RelationDef {
        super::content_metadata_tag::Relation::Tag.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::content_metadata_tag::Relation::ContentMetadata
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
